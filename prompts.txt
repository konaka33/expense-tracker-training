# AI対話記録（prompts.txt）

## セッション情報
- 日時: 2025-10-29
- AI: Claude Code (Sonnet 4.5)
- ユーザー: konaka33

---

## プロンプト1: 仕様書作成の依頼

### ユーザー入力:
```
課題:支出管理アプリ開発（AI活用型）
📋 課題概要
Claude CodeなどのAIを活用して、日々の支出を記録・管理するWebアプリを開発してください。
この課題では**「AIをどう使うか」**が重要な評価ポイントです。仕様作成から実装まで、AIとの対話を記録してください。

✅ 必須機能
1. 支出記録
* 日付、カテゴリ、金額、メモを入力
* ブラウザのlocalStorageに保存
2. 支出一覧表示
* 記録した支出を一覧表示
* 削除機能
3. カテゴリ別集計
* 食費、交通費、娯楽費などカテゴリ別に集計
* 合計金額を表示

推奨技術スタック
* フロントエンド: HTML, CSS, JavaScript
* データ永続化: localStorage + Google Spreadsheet
* バックエンド: Google Apps Script (GAS)
* ホスティング: GitHub Pages
* バージョン管理: Git/GitHub

上記の課題が与えられた。解いて。また、どのように課題を進めたらいいかも教えて。
```

### AI応答:
- 課題内容を理解し、ステップバイステップで進める提案
- 確認事項の提示（GitHubユーザー名など）
- 「支出管理アプリ開発」ディレクトリの作成
- Todoリストの作成（仕様書作成、GitHub設定、実装、GAS連携、公開、prompts.txt作成）

---

## プロンプト2: 仕様書の修正依頼

### ユーザー入力:
```
カテゴリ選択をプルダウン形式に変更して。
保存データ構造をオブジェクト配列で再定義して。
仕様書.mdという名前で保存したい。
公共料金と家賃の項目も欲しい。
```

### AI応答:
1. カテゴリをselectプルダウン形式で実装することを仕様書に明記
2. カテゴリに「公共料金」「家賃」を追加（全8カテゴリ）
3. データ構造をオブジェクト配列形式で再定義
   - TypeScript風の型定義も追加
   - 各プロパティの説明を追加
4. ファイル名を「spec.md」から「仕様書.md」に変更

### 修正箇所:
- カテゴリ一覧: 食費、交通費、娯楽費、日用品、医療費、公共料金、家賃、その他
- データ構造: interface Expense 型定義を追加
- ファイル名: 仕様書.md

---

## プロンプト3: 実装フェーズへの移行

### ユーザー入力:
```
次のステップに進みユーザー名はkonaka33
```

### AI応答:
1. GitHubリポジトリの初期化
   - `git init` 実行
   - README.md作成（プロジェクト概要、技術スタック、デモURL等）
   - .gitignore作成（macOS、エディタ、一時ファイル除外）
   - 初回コミット実行

2. HTML/CSS/JSファイルの実装
   - **index.html**:
     - セマンティックHTMLでマークアップ
     - フォーム（日付、カテゴリプルダウン、金額、メモ）
     - カテゴリ別集計セクション
     - 支出一覧セクション
     - 課題完了通知ボタン

   - **style.css**:
     - グラデーション背景（紫系）
     - レスポンシブデザイン（PC/タブレット/スマホ対応）
     - カード型レイアウト
     - ホバーエフェクト
     - スクロールバーカスタマイズ

   - **main.js**:
     - localStorage CRUD操作
     - 支出追加機能（バリデーション付き）
     - 支出削除機能（確認ダイアログ付き）
     - カテゴリ別集計計算
     - Google Spreadsheet同期機能
     - LINE通知機能（課題完了通知）
     - 日付降順ソート
     - フォーム自動リセット

3. Google Apps Script実装
   - **gas/Code.gs**:
     - doPost関数（Webアプリエンドポイント）
     - スプレッドシート自動作成
     - データ重複チェック
     - タイムスタンプ付き記録
     - エラーハンドリング
     - デバッグ用関数（getAllExpenses, clearAllData）

   - **gas/README.md**:
     - セットアップ手順の詳細説明
     - デプロイ方法
     - トラブルシューティング
     - 動作確認方法

4. Gitコミット実行
   - コミットメッセージに実装内容を明記
   - Claude Code署名付き

---

## 使用したAI活用テクニック

1. **段階的な仕様策定**
   - 最初に大枠の仕様書を作成
   - ユーザーのフィードバックで詳細を追加・修正
   - 具体的な要望（プルダウン、カテゴリ追加）に即座に対応

2. **一貫性のある実装**
   - 仕様書で定義したカテゴリをそのままHTMLとJSに反映
   - データ構造（オブジェクト配列）を全ファイルで統一
   - 命名規則の統一（expenses, CATEGORIES, etc.）

3. **実用的なコメント付与**
   - 各関数にJSDocコメント
   - セットアップ手順を詳細に記載
   - TODO コメントで後続作業を明示

4. **デバッグ支援**
   - GASにテスト用関数を追加
   - エラーハンドリングを各所に実装
   - トラブルシューティングガイドを提供

---

## 次のステップ

1. GitHubにリモートリポジトリを作成
   ```bash
   # GitHub Web UIで「expense-tracker-training」リポジトリを作成
   git remote add origin https://github.com/konaka33/expense-tracker-training.git
   git push -u origin main
   ```

2. GitHub Pagesを有効化
   - Settings > Pages
   - Source: main branch / root
   - 公開URLを確認

3. Google Apps Scriptのデプロイ
   - gas/README.md の手順に従ってデプロイ
   - Web App URLを取得
   - main.js の GAS_WEB_APP_URL に設定

4. LINE Notify設定（オプション）
   - LINE Notifyでトークン取得
   - main.js の LINE_NOTIFY_TOKEN に設定

5. 動作確認
   - GitHub PagesのURLでアプリにアクセス
   - 支出を追加・削除・集計を確認
   - Google Spreadsheet同期を確認

6. 課題完了通知を送信

---

## 学んだこと

- AIに対して「段階的に詳細化」する指示が効果的
- 具体的な要件（カテゴリ追加、ファイル名変更）は明確に伝える
- 仕様書→実装→テストという流れを明示することで、AIが適切な優先順位で作業できる
- コメントやREADMEの自動生成により、ドキュメント作成の手間が大幅削減
